**Lendo arquivo texto com classes File e Scanner**

--> Classes:
	-File: Representação abstrata de um arquivo e seu caminho;
	-Scanner: Leitor de texto;
	-IOException (Exception);
exemplo:
#ler um arquivo texto qualquer:
//Criando um objeto do tipo file
File file = new File ("caminho do arquivo");
Scanner sc =null;
        try{ //o sistema pode tentar abrir o arq, causando uma excessão do tipo IOException;
            sc=new Scanner(file);
            while(sc.hasNextLine()){ //testa se existe uma nova linha no arquivo
            System.err.println(sc.nextLine());
        }
        }
        catch (IOException e){
            System.out.println("Error: "+ e.getMessage());
        }
        finally{
            if (sc!=null){
                sc.close();
            }

**FILEREADER E BUFFEDREADER**
->FileReader: stream de leitura de caracteres a partir de arquivos;
->BufferedReader: Instanciado a partir do FeleReader --> mais rápido

**TRY-WITH-RESOURCES**
->É um bloco que declara um ou mais recursos, e garante que esses recursos serão fechados ao final do bloco;
->Disponível do Java 7 em diante;

**FILEWRITER E BUFFEREDWRITER**
-> FileWriter: stream de escrita de caracteres em arquivos;
	-Cria/recria arqvs. - new FileWriter (pach)
	-Acrescenta ao arquivo existente - new FileWriter (pach, true)
->BuferedWriter (mais rápido);
	
**OBTENDO INFORMAÇÕES DO CAMINHO**
package application;
import java.io.File;
import java.util.Scanner;
public class Program {
public static void main(String[] args) {
Scanner sc = new Scanner(System.in);
System.out.println("Enter a folder path: ");
String strPath = sc.nextLine();
File path = new File(strPath);
System.out.println("getPath: " + path.getPath());
System.out.println("getParent: " + path.getParent());
System.out.println("getName: " + path.getName());
sc.close();
}
}
